buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
    id "com.jfrog.bintray" version "1.2"
    id "us.kirchmeier.capsule" version "1.0.2"
    id "com.diffplug.gradle.spotless" version "3.1.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.diffplug.gradle.spotless'
//apply plugin: 'findbugs'
//apply plugin: "jacoco"


sourceSets {
    main
    {
        java
        { srcDir 'src' }
        resources
        { srcDir 'src' }
    }
    test
    {
        java
        { srcDir 'src' }
        resources
        { srcDir 'src' }
    }
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = {
    ->
    try
    {
	    def stdout = new ByteArrayOutputStream()
	    exec {
	        commandLine 'git', 'describe', '--tags'
	        standardOutput = stdout
	    }
	    return stdout.toString().trim()
    }
    catch(Throwable e)
    {
    	println e
    }
}


sourceCompatibility = 1.8

group = 'net.ClearControl'
version = getVersionName()

test 
{
    testLogging.showStandardStreams = true 
    testLogging 
    {
        events "passed", "skipped", "failed"
    }

    exclude '**/demo/**'

    maxHeapSize = "16G"
}

task citest( type: Test ) {
    testLogging.showStandardStreams = true 
    testLogging 
    {
        events "passed", "skipped", "failed"
    }

    exclude '**/demo/**'
    
    exclude '**/math/argmax/fitprob/**'
    exclude '**/math/argmax/test/**'
    exclude '**/scripting/autoimport/**'
    exclude '**/scripting/**'
    exclude '**/ip/iqm/**'
    exclude '**/concurrent/timing/test/**'

    maxHeapSize = "16G"
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies 
{
    // JUnit:
    compile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'junit', name: 'junit', version: '4.11'

    // Commons:
    compile ('org.apache.commons:commons-collections4:4.0') {transitive= true}
    compile ('commons-io:commons-io:2.4')                   {transitive= true}
    compile ('org.apache.commons:commons-lang3:3.4')        {transitive= true}
    compile ('org.apache.commons:commons-math3:3.5')        {transitive= true}
    compile ('org.apache.logging.log4j:log4j-api:2.1')      {transitive= true}
    compile ('org.apache.logging.log4j:log4j-core:2.1')     {transitive= true}

    // Guava:
    compile ('com.google.guava:guava:18.0') {transitive= true}

    // Trove:
    compile ('net.sf.trove4j:trove4j:3.0.3') {transitive= true}

    // Jakson for JSON:
    compile ('com.fasterxml.jackson.core:jackson-databind:2.6.1') {transitive= true}

    // JScience:
    compile ('org.jscience:jscience:4.3.1') {transitive= true}

    // Matrix libs:
    compile ('de.mukis:de.mukis.jama:2.0.0.M1') {transitive= true}
    compile ('com.googlecode.efficient-java-matrix-library:ejml:0.+') {transitive= true}

    // JTransforms:
    compile fileTree(dir: 'Libs/jtransforms', include: '*.jar')

    // VecMath:
    compile ('java3d:vecmath:1.3.1')  {transitive= true}

    // openHFT
    compile 'net.openhft:compiler:2.1'
    compile 'net.openhft:lang:6.3.5'
    compile 'net.openhft:affinity:2.0.6'
    compile 'net.openhft:collections:3.0.2' 
    compile 'net.openhft:chronicle:3.0.1'
    
    // Scripting (groovy, jpython...):
    compile 'org.python:jython:2.7-rc2'
    compile 'com.fifesoft:rsyntaxtextarea:2.5.6'
    compile 'org.reflections:reflections:0.9.10'
    compile 'org.codehaus.groovy:groovy-all:2.4.3:indy'
    
    // Mail:
    compile 'javax.mail:mail:1.4.7'

    
    // Look and feels:
    compile 'com.seaglasslookandfeel:seaglasslookandfeel:0.1.7.3'
    compile 'com.jgoodies:looks:2.2.2'
    compile 'org.devzendo:Quaqua:7.3.4'

    // JavaFX:
    compile ('eu.hansolo.enzo:Enzo:0.3.6')                   {transitive= true}
    compile ('org.controlsfx:controlsfx:8.40.11')            {transitive= true}
    
    compile ('de.jensd:fontawesomefx:8.0.10')                {transitive= true}

 
    // MigLayout:
    compile 'com.miglayout:miglayout:3.7.4'

    // JMathPlot:
    compile 'com.github.yannrichet:JMathPlot:1.0.1'

    // imglib2:  
    compile ('net.imglib2:imglib2:2.2.0')                    {transitive = true}
    compile ('net.imglib2:imglib2-ui:2.0.0-beta-28')         {transitive = true}
    compile ('net.imglib2:imglib2-ij:2.0.0-beta-30')         {transitive = true}
    compile ('net.imglib2:imglib2-algorithm:0.2.1')          {transitive = true}

    // Bridj and co:
    compile 'com.nativelibs4java:bridj:0.7.0'
    compile 'com.nativelibs4java:javacl:1.0.0-RC4'

    // JSSC (serial):
    compile ('org.scream3r:jssc:2.8.0')                      {transitive= true; changing= true}
   
    // Halcyon:
    compile ('net.halcyon:halcyon:[0.3.8, 0.4.0[')           {transitive=true;  changing= true}

    // Sqeazy:
    compile ('net.sqeazy:sqeazy:[0.4.2, 0.5.0[')             {transitive= true; changing= true}

    // CoreMem: 
    // transitively available via simbryo, clearvolume...

	// ClearCL:
    compile ('net.clearvolume:clearcl:0.4.6')     {transitive= true; changing= true}
    
    // EasyPlot:
    compile ('NeatoPlot:EasyPlot:unspecified') {transitive= true; changing= true}
    
    // Clear*:
    compile ('net.clearvolume:clearvolume:[1.4.1, 1.5.0[')   {transitive= true; changing= true}
    compile ('net.clearvolume:clearaudio:[1.0.2, 1.1.0[')    {transitive= true; changing= true}

    // clearcontrol
    compile ('net.clearcontrol:clearcontrol:0.8.9')   {transitive= true; changing= true}
    
    // Symbrio:
    compile ('net.clearcontrol:simbryo:[0.7.3, 0.8.0[')      {transitive= true; changing= true}
    
    // FastFuse:
    compile ('net.clearcontrol:fastfuse:[0.5.3,0.6.0[')      {transitive= true; changing= true}

    // AO:
    compile ('net.clearcontrol:mirao52j:(,2.0.0[')           {transitive=true; changing= true}
    compile ('net.clearcontrol:asdkj:(,2.0.0[')              {transitive=true; changing= true}

    // Cameras:
    compile ('net.clearcontrol:dcamj:(,3.0.0[')              {transitive=true; changing= true}
    //compile ('net.clearcontrol:andorsdkj:[0.1.0,1.0.0]')   {transitive=true; changing= true}
    compile 'com.github.sarxos:webcam-capture:0.3.9'
 
    // Stages:
    compile ('net.clearcontrol:ecc100j:(,2.0.0[')            {transitive=true; changing= true}
    compile ('net.clearcontrol:aptj:(,1.0.0[')               {transitive=true; changing= true}

    // NIRIOJ:
    compile ('net.clearcontrol:nirioj:(,2.0.0]')             {transitive=true; changing= true}

    // Other:
    //compile 'com.github.rwl:jtransforms:2.4.0'
    //compile 'org.lwjgl.lwjgl:lwjgl:2.9.1'

}


repositories 
{
    // main repos:

    mavenLocal()
    mavenCentral()
    // maven {url "C:\\Users\\myersadmin\\.m2\\repository"}
    maven { url "http://oss.sonatype.org/content/groups/public"} 
    maven { url "http://mvnrepository.com/artifact" }

    // ClearControl:
    maven { url  "http://dl.bintray.com/clearcontrol/ClearControl"  }

    // ClearVolume: 
    maven { url "http://dl.bintray.com/clearvolume/ClearVolume" }

    //imglib2:
    maven { url  "http://maven.imagej.net/content/repositories/releases" }
    maven { url  "http://maven.imagej.net/content/repositories/snapshots" }
    maven { url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/" }
    
    //jfxtras:
    maven { url "https://mvnrepository.com/artifact/org.jfxtras/jfxtras-labs" }
    
    //FontAwesome
    maven { url  "http://dl.bintray.com/jerady/maven" }
    
    //Sqeazy:
    maven {url  "http://dl.bintray.com/sqeazy/maven" }

    //bio-formats:
    maven { url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases" }
    maven { url "http://artifacts.openmicroscopy.org/artifactory/maven/"}
}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }


//***********************************************************************************

// PUBLISHING




artifacts
{
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
        }
    }
}

apply from: 'gradle/bintrayUpload.gradle'

//***********************************************************************************
// GIT HOOKS:

apply from: 'gradle/install-git-hooks.gradle'


//***********************************************************************************
// SPOTLESS:

spotless {
    java {
        //licenseHeader '/* Licensed under Apache-2.0 */' // License header
 
        importOrder(['java', 'javax', 'com', 'org'])

        removeUnusedImports() // removes any unused imports

        eclipseFormatFile 'codeformat.eclipse.xml'  
    }
}


//***********************************************************************************
// FINDBUGS:

//tasks.withType(FindBugs) {
//    reports {
//        xml.enabled false
//        html.enabled true
//    }
//}


//***********************************************************************************
// JACOCO:

/*
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.20
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacoco.html"
    }
}
/**/











